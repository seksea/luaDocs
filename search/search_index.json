{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"classes/","text":"Classes Entity GetNetvarInt() Returns value of a netvar int Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"localPlayer's health: \" .. localPlayer:GetNetvarInt(\"DT_BasePlayer\", \"m_iHealth\")) end Output: localPlayer's health: 100 SetNetvarInt() Sets value of a netvar int GetNetvarFloat() Same as GetNetvarInt(), just with a float SetNetvarFloat() Same as SetNetvarInt(), just with a float ClassID() Return's the entities' ClassID, e.g 40 for players Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"localPlayer's classid: \" .. localPlayer:ClassID()) end Output: localPlayer's classid: 40 NetworkName() Return's the entities' network name e.g CCSPlayer for players Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"localPlayer's network name: \" .. localPlayer:NetworkName()) end Output: localPlayer's network name: CCSPlayer Exists() Checks the entity exists, checking for this should be done before doing anything else involving the ent Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"localPlayer's network name: \" .. localPlayer:NetworkName()) end Enemy() Checks if the entity is an enemy, this should be used over team netvar as it accounts for dangerzone too Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"is localPlayer an enemy? (will obviously return false): \" .. tostring(localPlayer:Enemy())) end Output: is localPlayer an enemy? (will obviously return false): false Origin() Gets entities' position Example: local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then -- Get the localPlayer's origin local origin = localPlayer:Origin() -- Print the origin print(\"localPlayer's origin = X:\" .. origin.x .. \" Y:\" .. origin.y .. \" Z:\" .. origin.z) end Output: localPlayer's origin = X:1853.345 Y:-242.234 Z:232.463 GetBox() Gets a box around the specified entity for ESP and returns each corner in a vec4 Example: -- Simple ChickenESP using GetBox function onDraw() if Interfaces.Engine.IsInGame() then for k, chickenIndex in pairs(Utils.GetEntitiesByClassID(36)) do local chickenEntity = Interfaces.EntityList.GetClientEntity(chickenIndex) if chickenEntity:Exists() then local box = chickenEntity:GetBox() Draw.CenteredOutlinedText(Vec2(box.x + ((box.z-box.x)//2), box.y - 14), Color(255, 255, 255, 255), Color(0, 0, 0, 255), \"Chicken\") Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), Color(255, 255, 255, 255), Color(0, 0, 0, 255), 1) end end end end RegisterHook(\"Draw\", \"onDraw\") Color Basic color class Contains: r, g, b, a Vec2 Basic Vec2 class Contains: x, y Vec3 Basic Vec3 class Contains: x, y, z Vec4 Basic Vec4 class Contains: x, y, z, w","title":"Classes"},{"location":"classes/#classes","text":"","title":"Classes"},{"location":"classes/#entity","text":"","title":"Entity"},{"location":"classes/#getnetvarint","text":"Returns value of a netvar int Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"localPlayer's health: \" .. localPlayer:GetNetvarInt(\"DT_BasePlayer\", \"m_iHealth\")) end Output: localPlayer's health: 100","title":"GetNetvarInt()"},{"location":"classes/#setnetvarint","text":"Sets value of a netvar int","title":"SetNetvarInt()"},{"location":"classes/#getnetvarfloat","text":"Same as GetNetvarInt(), just with a float","title":"GetNetvarFloat()"},{"location":"classes/#setnetvarfloat","text":"Same as SetNetvarInt(), just with a float","title":"SetNetvarFloat()"},{"location":"classes/#classid","text":"Return's the entities' ClassID, e.g 40 for players Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"localPlayer's classid: \" .. localPlayer:ClassID()) end Output: localPlayer's classid: 40","title":"ClassID()"},{"location":"classes/#networkname","text":"Return's the entities' network name e.g CCSPlayer for players Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"localPlayer's network name: \" .. localPlayer:NetworkName()) end Output: localPlayer's network name: CCSPlayer","title":"NetworkName()"},{"location":"classes/#exists","text":"Checks the entity exists, checking for this should be done before doing anything else involving the ent Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"localPlayer's network name: \" .. localPlayer:NetworkName()) end","title":"Exists()"},{"location":"classes/#enemy","text":"Checks if the entity is an enemy, this should be used over team netvar as it accounts for dangerzone too Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then print(\"is localPlayer an enemy? (will obviously return false): \" .. tostring(localPlayer:Enemy())) end Output: is localPlayer an enemy? (will obviously return false): false","title":"Enemy()"},{"location":"classes/#origin","text":"Gets entities' position Example: local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then -- Get the localPlayer's origin local origin = localPlayer:Origin() -- Print the origin print(\"localPlayer's origin = X:\" .. origin.x .. \" Y:\" .. origin.y .. \" Z:\" .. origin.z) end Output: localPlayer's origin = X:1853.345 Y:-242.234 Z:232.463","title":"Origin()"},{"location":"classes/#getbox","text":"Gets a box around the specified entity for ESP and returns each corner in a vec4 Example: -- Simple ChickenESP using GetBox function onDraw() if Interfaces.Engine.IsInGame() then for k, chickenIndex in pairs(Utils.GetEntitiesByClassID(36)) do local chickenEntity = Interfaces.EntityList.GetClientEntity(chickenIndex) if chickenEntity:Exists() then local box = chickenEntity:GetBox() Draw.CenteredOutlinedText(Vec2(box.x + ((box.z-box.x)//2), box.y - 14), Color(255, 255, 255, 255), Color(0, 0, 0, 255), \"Chicken\") Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), Color(255, 255, 255, 255), Color(0, 0, 0, 255), 1) end end end end RegisterHook(\"Draw\", \"onDraw\")","title":"GetBox()"},{"location":"classes/#color","text":"Basic color class Contains: r, g, b, a","title":"Color"},{"location":"classes/#vec2","text":"Basic Vec2 class Contains: x, y","title":"Vec2"},{"location":"classes/#vec3","text":"Basic Vec3 class Contains: x, y, z","title":"Vec3"},{"location":"classes/#vec4","text":"Basic Vec4 class Contains: x, y, z, w","title":"Vec4"},{"location":"examples/","text":"Examples Simple ESP function onDraw() if Interfaces.Engine.IsInGame() then for k, index in pairs(Utils.GetEntitiesByClassID(40)) do if not (index == Interfaces.Engine.GetLocalPlayer()) then local entity = Interfaces.EntityList.GetClientEntity(index) if entity:Exists() and not entity:Dormant() and entity:GetNetvarInt(\"DT_BasePlayer\", \"m_iHealth\") > 0 then local box = entity:GetBox() Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), entity:Enemy() and UI.GetConfigColor(\"simpleESP.EnemyColor\") or UI.GetConfigColor(\"simpleESP.TeamColor\"), Color(0, 0, 0, 100), 1) end end end end end function onUI() UI.AddColorPicker(\"Enemy\", \"simpleESP.EnemyColor\") UI.AddColorPicker(\"Team\", \"simpleESP.TeamColor\") end RegisterHook(\"Draw\", \"onDraw\") RegisterHook(\"UI\", \"onUI\") Chicken ESP function onDraw() if Interfaces.Engine.IsInGame() then -- Chicken's classid is 36 for k, chickenIndex in pairs(Utils.GetEntitiesByClassID(36)) do local chickenEntity = Interfaces.EntityList.GetClientEntity(chickenIndex) if chickenEntity:Exists() and not chickenEntity:Dormant() then local box = chickenEntity:GetBox() Draw.CenteredOutlinedText(Vec2(box.x + ((box.z-box.x)//2), box.y - 14), Color(255, 255, 255, 255), Color(0, 0, 0, 255), \"Chicken\") Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), UI.GetConfigColor(\"chickenESP.Color\"), Color(0, 0, 0, 255), 1) end end end end function onUI() UI.AddColorPicker(\"Chicken Color\", \"chickenESP.Color\") end RegisterHook(\"UI\", \"onUI\") RegisterHook(\"Draw\", \"onDraw\") ESP Everything Useful for getting classid's / network names of entities function onDraw() if Interfaces.Engine.IsInGame() then for index=0, Interfaces.EntityList.GetHighestEntityIndex() do local entity = Interfaces.EntityList.GetClientEntity(index) if entity:Exists() then local box = entity:GetBox() Draw.Text(Vec2(box.x + ((box.z-box.x)//2), box.y - 14), Color(255, 255, 255, 255), entity:NetworkName() .. \" (\" .. entity:ClassID() .. \")\") Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), Color(255, 255, 255, 255), Color(0, 0, 0, 255), 1) end end end end RegisterHook(\"Draw\", \"onDraw\")","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#simple-esp","text":"function onDraw() if Interfaces.Engine.IsInGame() then for k, index in pairs(Utils.GetEntitiesByClassID(40)) do if not (index == Interfaces.Engine.GetLocalPlayer()) then local entity = Interfaces.EntityList.GetClientEntity(index) if entity:Exists() and not entity:Dormant() and entity:GetNetvarInt(\"DT_BasePlayer\", \"m_iHealth\") > 0 then local box = entity:GetBox() Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), entity:Enemy() and UI.GetConfigColor(\"simpleESP.EnemyColor\") or UI.GetConfigColor(\"simpleESP.TeamColor\"), Color(0, 0, 0, 100), 1) end end end end end function onUI() UI.AddColorPicker(\"Enemy\", \"simpleESP.EnemyColor\") UI.AddColorPicker(\"Team\", \"simpleESP.TeamColor\") end RegisterHook(\"Draw\", \"onDraw\") RegisterHook(\"UI\", \"onUI\")","title":"Simple ESP"},{"location":"examples/#chicken-esp","text":"function onDraw() if Interfaces.Engine.IsInGame() then -- Chicken's classid is 36 for k, chickenIndex in pairs(Utils.GetEntitiesByClassID(36)) do local chickenEntity = Interfaces.EntityList.GetClientEntity(chickenIndex) if chickenEntity:Exists() and not chickenEntity:Dormant() then local box = chickenEntity:GetBox() Draw.CenteredOutlinedText(Vec2(box.x + ((box.z-box.x)//2), box.y - 14), Color(255, 255, 255, 255), Color(0, 0, 0, 255), \"Chicken\") Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), UI.GetConfigColor(\"chickenESP.Color\"), Color(0, 0, 0, 255), 1) end end end end function onUI() UI.AddColorPicker(\"Chicken Color\", \"chickenESP.Color\") end RegisterHook(\"UI\", \"onUI\") RegisterHook(\"Draw\", \"onDraw\")","title":"Chicken ESP"},{"location":"examples/#esp-everything","text":"Useful for getting classid's / network names of entities function onDraw() if Interfaces.Engine.IsInGame() then for index=0, Interfaces.EntityList.GetHighestEntityIndex() do local entity = Interfaces.EntityList.GetClientEntity(index) if entity:Exists() then local box = entity:GetBox() Draw.Text(Vec2(box.x + ((box.z-box.x)//2), box.y - 14), Color(255, 255, 255, 255), entity:NetworkName() .. \" (\" .. entity:ClassID() .. \")\") Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), Color(255, 255, 255, 255), Color(0, 0, 0, 255), 1) end end end end RegisterHook(\"Draw\", \"onDraw\")","title":"ESP Everything"},{"location":"hooking/","text":"Hooking Create a hook A hook is done using RegisterHook , the first argument is what you want to hook, and the second the name of the lua func you want the hook to run Example: function onDraw() -- This will run at draw, here you can use the draw funcs to draw primitives and text end function onFSN(frame) if frame == 3 then -- This will run in the NET_UPDATE_POSTDATAUPDATE_END frame in FrameStageNotify end end function onUI() UI.AddCheckbox(\"Test Checkbox\", \"test checkbox var\") end RegisterHook(\"Draw\", \"onDraw\") RegisterHook(\"FrameStageNotify\", \"onFSN\") RegisterHook(\"UI\", \"onUI\") Hooks List of what you can currently hook in lua Draw Is ran when drawing to screen, you can draw things to screen here as shown in Utils->Draw FrameStageNotify Passes an int specifying the current frame Frame Name -1 UNDEFINED 0 START 1 NET_UPDATE_START 2 NET_UPDATE_POSTDATAUPDATE_START 3 NET_UPDATE_POSTDATAUPDATE_END 4 NET_UPDATE_END 5 RENDER_START 6 RENDER_END UI Is ran for custom menu items in your lua scripts, look in Utils->UI and the simpleESP example for more","title":"Hooking"},{"location":"hooking/#hooking","text":"","title":"Hooking"},{"location":"hooking/#create-a-hook","text":"A hook is done using RegisterHook , the first argument is what you want to hook, and the second the name of the lua func you want the hook to run Example: function onDraw() -- This will run at draw, here you can use the draw funcs to draw primitives and text end function onFSN(frame) if frame == 3 then -- This will run in the NET_UPDATE_POSTDATAUPDATE_END frame in FrameStageNotify end end function onUI() UI.AddCheckbox(\"Test Checkbox\", \"test checkbox var\") end RegisterHook(\"Draw\", \"onDraw\") RegisterHook(\"FrameStageNotify\", \"onFSN\") RegisterHook(\"UI\", \"onUI\")","title":"Create a hook"},{"location":"hooking/#hooks","text":"List of what you can currently hook in lua","title":"Hooks"},{"location":"hooking/#draw","text":"Is ran when drawing to screen, you can draw things to screen here as shown in Utils->Draw","title":"Draw"},{"location":"hooking/#framestagenotify","text":"Passes an int specifying the current frame Frame Name -1 UNDEFINED 0 START 1 NET_UPDATE_START 2 NET_UPDATE_POSTDATAUPDATE_START 3 NET_UPDATE_POSTDATAUPDATE_END 4 NET_UPDATE_END 5 RENDER_START 6 RENDER_END","title":"FrameStageNotify"},{"location":"hooking/#ui","text":"Is ran for custom menu items in your lua scripts, look in Utils->UI and the simpleESP example for more","title":"UI"},{"location":"interfaces/","text":"Interfaces Engine GetWindowWidth() Returns window width: Example: print(\"Screen Resolution: \" .. tostring(Interfaces.Engine.GetScreenWidth()) .. \"x\" .. tostring(Interfaces.Engine.GetScreenHeight())) Output: Screen resolution: 1920x1080 GetWindowHeight() Returns window height: Example: print(\"Screen Resolution: \" .. tostring(Interfaces.Engine.GetScreenWidth()) .. \"x\" .. tostring(Interfaces.Engine.GetScreenHeight())) Output: Screen resolution: 1920x1080 GetLocalPlayer() Returns local player's index: Example: print(\"LocalPlayer: \" .. tostring(Interfaces.Engine.GetLocalPlayer())) Output: LocalPlayer: 1 IsInGame() Returns true/false whether you are currently in-game: Example: print(\"InGame: \" .. tostring(Interfaces.Engine.IsInGame())) Output: InGame: false (would say true if in game) IsConnected() Returns true/false whether you are currently connected (in-game, or connected but in loading screen): Example: print(\"Connected: \" .. tostring(Interfaces.Engine.IsConnected())) Output: Connected: false (would say true if in game/end of loading screen) ExecuteClientCmd() Runs a command as if it were ran in console Example: Interfaces.Engine.ExecuteClientCmd(\"clear;echo Hello World!\") Would clear the in-game console and print to it: \"Hello World!\" Input IsButtonDown() Returns true/false if button is pressed Example: TODO: This example. EntityList GetClientEntity() Returns the Entity of a specified index Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then -- Get the localPlayer's origin local origin = localPlayer:Origin() -- Print the origin print(\"localPlayer's origin = X:\" .. origin.x .. \" Y:\" .. origin.y .. \" Z:\" .. origin.z) end Output: localPlayer's origin = X:1853.345 Y:-242.234 Z:232.463 GetHighestEntityIndex Returns the index of the highest entity, (useful for doing a for loop over every ent in-game, although using GetEntitiesByClassID unless trying to loop through every enity, as it is more efficient by a landslide) Example: for entityIndex=0, Interfaces.EntityList.GetHighestEntityIndex() do local entity = Interfaces.EntityList.GetClientEntity(entityIndex) if entity:Exists() then local origin = entity:Origin() print(\"Entity \" .. entityIndex .. \"'s origin = X:\" .. origin.x .. \" Y:\" .. origin.y .. \" Z:\" .. origin.z) end end Output: Entity 0's origin = X:0 Y:0 Z:0 (Repeating for all entities)","title":"Interfaces"},{"location":"interfaces/#interfaces","text":"","title":"Interfaces"},{"location":"interfaces/#engine","text":"","title":"Engine"},{"location":"interfaces/#getwindowwidth","text":"Returns window width: Example: print(\"Screen Resolution: \" .. tostring(Interfaces.Engine.GetScreenWidth()) .. \"x\" .. tostring(Interfaces.Engine.GetScreenHeight())) Output: Screen resolution: 1920x1080","title":"GetWindowWidth()"},{"location":"interfaces/#getwindowheight","text":"Returns window height: Example: print(\"Screen Resolution: \" .. tostring(Interfaces.Engine.GetScreenWidth()) .. \"x\" .. tostring(Interfaces.Engine.GetScreenHeight())) Output: Screen resolution: 1920x1080","title":"GetWindowHeight()"},{"location":"interfaces/#getlocalplayer","text":"Returns local player's index: Example: print(\"LocalPlayer: \" .. tostring(Interfaces.Engine.GetLocalPlayer())) Output: LocalPlayer: 1","title":"GetLocalPlayer()"},{"location":"interfaces/#isingame","text":"Returns true/false whether you are currently in-game: Example: print(\"InGame: \" .. tostring(Interfaces.Engine.IsInGame())) Output: InGame: false (would say true if in game)","title":"IsInGame()"},{"location":"interfaces/#isconnected","text":"Returns true/false whether you are currently connected (in-game, or connected but in loading screen): Example: print(\"Connected: \" .. tostring(Interfaces.Engine.IsConnected())) Output: Connected: false (would say true if in game/end of loading screen)","title":"IsConnected()"},{"location":"interfaces/#executeclientcmd","text":"Runs a command as if it were ran in console Example: Interfaces.Engine.ExecuteClientCmd(\"clear;echo Hello World!\") Would clear the in-game console and print to it: \"Hello World!\"","title":"ExecuteClientCmd()"},{"location":"interfaces/#input","text":"","title":"Input"},{"location":"interfaces/#isbuttondown","text":"Returns true/false if button is pressed Example: TODO: This example.","title":"IsButtonDown()"},{"location":"interfaces/#entitylist","text":"","title":"EntityList"},{"location":"interfaces/#getcliententity","text":"Returns the Entity of a specified index Example: -- Get localPlayer local localPlayer = Interfaces.EntityList.GetClientEntity(Interfaces.Engine.GetLocalPlayer()) if localPlayer:Exists() then -- Get the localPlayer's origin local origin = localPlayer:Origin() -- Print the origin print(\"localPlayer's origin = X:\" .. origin.x .. \" Y:\" .. origin.y .. \" Z:\" .. origin.z) end Output: localPlayer's origin = X:1853.345 Y:-242.234 Z:232.463","title":"GetClientEntity()"},{"location":"interfaces/#gethighestentityindex","text":"Returns the index of the highest entity, (useful for doing a for loop over every ent in-game, although using GetEntitiesByClassID unless trying to loop through every enity, as it is more efficient by a landslide) Example: for entityIndex=0, Interfaces.EntityList.GetHighestEntityIndex() do local entity = Interfaces.EntityList.GetClientEntity(entityIndex) if entity:Exists() then local origin = entity:Origin() print(\"Entity \" .. entityIndex .. \"'s origin = X:\" .. origin.x .. \" Y:\" .. origin.y .. \" Z:\" .. origin.z) end end Output: Entity 0's origin = X:0 Y:0 Z:0 (Repeating for all entities)","title":"GetHighestEntityIndex"},{"location":"utils/","text":"Utils Utils GetEntitiesByClassID() Gets all entities that match a classid, much more efficient than a crude loop over all ents Example: -- Simple ChickenESP using GetEntitiesByClassID function onDraw() if Interfaces.Engine.IsInGame() then for k, chickenIndex in pairs(Utils.GetEntitiesByClassID(36)) do local chickenEntity = Interfaces.EntityList.GetClientEntity(chickenIndex) if chickenEntity:Exists() then local box = chickenEntity:GetBox() Draw.CenteredOutlinedText(Vec2(box.x + ((box.z-box.x)//2), box.y - 14), Color(255, 255, 255, 255), Color(0, 0, 0, 255), \"Chicken\") Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), Color(255, 255, 255, 255), Color(0, 0, 0, 255), 1) end end end end RegisterHook(\"Draw\", \"onDraw\") Math WorldToScreen() Takes a Vec3, returns a Vec2 of where it exists on-screen Example: -- Simple ChickenESP using WorldToScreen function onDraw() if Interfaces.Engine.IsInGame() then for k, chickenIndex in pairs(Utils.GetEntitiesByClassID(36)) do local chickenEntity = Interfaces.EntityList.GetClientEntity(chickenIndex) if chickenEntity:Exists() then local origin = chickenEntity:Origin() local originOnScreen = Math.WorldToScreen(origin) Draw.CenteredOutlinedText(Vec2(originOnScreen.x, originOnScreen.y), Color(255, 255, 255, 255), Color(0, 0, 0, 255), \"Chicken\") end end end end RegisterHook(\"Draw\", \"onDraw\") UI Everything beginning with \"Add\" should be done in a UI hook * UI.AddCheckbox(string label, string configItemName) (Config item is a configbool, so got with GetConfigBool) * UI.AddSliderInt(string label, string configItemName, int min, int max) (Config item is a configint, so got with GetConfigInt) * UI.AddColorPicker(string label, string configItemName) (Config item is a configcolor, so got with GetConfigColor) UI.GetConfigBool(string configItemName) UI.SetConfigBool(string configItemName, bool value) UI.GetConfigInt(string configItemName) UI.SetConfigInt(string configItemName, int value) UI.GetConfigColor(string configItemName) UI.SetConfigColor(string configItemName, Color value) Draw Everything in this section should be done in a draw hook Draw.Rect(Vec2 min, Vec2 max, Color col, int thickness) Draw.RoundedRect(Vec2 min, Vec2 max, Color col, int thickness, int rounding) Draw.OutlinedRect(Vec2 min, Vec2 max, Color col, Color outlineColor, int thickness) Draw.OutlinedRoundedRect(Vec2 min, Vec2 max, Color col, Color outlineColor, int thickness, int rounding) Draw.FilledRect(Vec2 min, Vec2 max, Color col, int thickness) Draw.FilledRoundedRect(Vec2 min, Vec2 max, Color col, int thickness, int rounding) Draw.FilledOutlinedRect(Vec2 min, Vec2 max, Color col, Color outlineColor, int thickness) Draw.FilledOutlinedRoundedRect(Vec2 min, Vec2 max, Color col, Color outlineColor, int thickness, int rounding) Draw.Circle(Vec2 pos, int r, Color col) Draw.OutlinedCircle(Vec2 pos, int r, Color col, Color outlineColor) Draw.FilledCircle(Vec2 pos, int r, Color col) Draw.FilledOutlinedCircle(Vec2 pos, int r, Color col, Color outlineColor) Draw.Text(Vec2 pos, Color col, string text) Draw.OutlinedText(Vec2 pos, Color col, Color outlineColor, string text) Draw.CenteredText(Vec2 pos, Color col, string text) Draw.CenteredOutlinedText(Vec2 pos, Color col, Color outlineColor, string text)","title":"Utils"},{"location":"utils/#utils","text":"","title":"Utils"},{"location":"utils/#utils_1","text":"","title":"Utils"},{"location":"utils/#getentitiesbyclassid","text":"Gets all entities that match a classid, much more efficient than a crude loop over all ents Example: -- Simple ChickenESP using GetEntitiesByClassID function onDraw() if Interfaces.Engine.IsInGame() then for k, chickenIndex in pairs(Utils.GetEntitiesByClassID(36)) do local chickenEntity = Interfaces.EntityList.GetClientEntity(chickenIndex) if chickenEntity:Exists() then local box = chickenEntity:GetBox() Draw.CenteredOutlinedText(Vec2(box.x + ((box.z-box.x)//2), box.y - 14), Color(255, 255, 255, 255), Color(0, 0, 0, 255), \"Chicken\") Draw.OutlinedRect(Vec2(box.x, box.y), Vec2(box.z, box.w), Color(255, 255, 255, 255), Color(0, 0, 0, 255), 1) end end end end RegisterHook(\"Draw\", \"onDraw\")","title":"GetEntitiesByClassID()"},{"location":"utils/#math","text":"","title":"Math"},{"location":"utils/#worldtoscreen","text":"Takes a Vec3, returns a Vec2 of where it exists on-screen Example: -- Simple ChickenESP using WorldToScreen function onDraw() if Interfaces.Engine.IsInGame() then for k, chickenIndex in pairs(Utils.GetEntitiesByClassID(36)) do local chickenEntity = Interfaces.EntityList.GetClientEntity(chickenIndex) if chickenEntity:Exists() then local origin = chickenEntity:Origin() local originOnScreen = Math.WorldToScreen(origin) Draw.CenteredOutlinedText(Vec2(originOnScreen.x, originOnScreen.y), Color(255, 255, 255, 255), Color(0, 0, 0, 255), \"Chicken\") end end end end RegisterHook(\"Draw\", \"onDraw\")","title":"WorldToScreen()"},{"location":"utils/#ui","text":"Everything beginning with \"Add\" should be done in a UI hook * UI.AddCheckbox(string label, string configItemName) (Config item is a configbool, so got with GetConfigBool) * UI.AddSliderInt(string label, string configItemName, int min, int max) (Config item is a configint, so got with GetConfigInt) * UI.AddColorPicker(string label, string configItemName) (Config item is a configcolor, so got with GetConfigColor) UI.GetConfigBool(string configItemName) UI.SetConfigBool(string configItemName, bool value) UI.GetConfigInt(string configItemName) UI.SetConfigInt(string configItemName, int value) UI.GetConfigColor(string configItemName) UI.SetConfigColor(string configItemName, Color value)","title":"UI"},{"location":"utils/#draw","text":"Everything in this section should be done in a draw hook Draw.Rect(Vec2 min, Vec2 max, Color col, int thickness) Draw.RoundedRect(Vec2 min, Vec2 max, Color col, int thickness, int rounding) Draw.OutlinedRect(Vec2 min, Vec2 max, Color col, Color outlineColor, int thickness) Draw.OutlinedRoundedRect(Vec2 min, Vec2 max, Color col, Color outlineColor, int thickness, int rounding) Draw.FilledRect(Vec2 min, Vec2 max, Color col, int thickness) Draw.FilledRoundedRect(Vec2 min, Vec2 max, Color col, int thickness, int rounding) Draw.FilledOutlinedRect(Vec2 min, Vec2 max, Color col, Color outlineColor, int thickness) Draw.FilledOutlinedRoundedRect(Vec2 min, Vec2 max, Color col, Color outlineColor, int thickness, int rounding) Draw.Circle(Vec2 pos, int r, Color col) Draw.OutlinedCircle(Vec2 pos, int r, Color col, Color outlineColor) Draw.FilledCircle(Vec2 pos, int r, Color col) Draw.FilledOutlinedCircle(Vec2 pos, int r, Color col, Color outlineColor) Draw.Text(Vec2 pos, Color col, string text) Draw.OutlinedText(Vec2 pos, Color col, Color outlineColor, string text) Draw.CenteredText(Vec2 pos, Color col, string text) Draw.CenteredOutlinedText(Vec2 pos, Color col, Color outlineColor, string text)","title":"Draw"}]}